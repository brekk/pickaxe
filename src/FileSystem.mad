import type { Wish } from "Wish"

import Dir from "Directory"
import IO from "IO"
import Wish from "Wish"



type FileDescriptor = FileDescriptor(String)

alias DirEnt = { directory :: Boolean, groups :: List String, name :: String, path :: String }
// alias DirEnt = #[String, String, Boolean]

#iftarget js

#- import fs from "node:fs" -#
#- import path from "node:path" -#

statment :: ((a -> {}) -> (c -> {}) -> a -> b -> c) -> String -> Wish a c
statment = (transform, filePath) => Wish.Wish(
  (b, g) => {
    #- fs.lstat(filePath, (e, x) => transform(b)(g)(e)(x)) -#
    return () => {}
  },
)


isDirectory :: String -> Wish a Boolean
export isDirectory = statment((b, g, e, x) => #- e ? g(false) : g(x.isDirectory()) -#)
// /*
isFile :: String -> Wish a Boolean
export isFile = statment((b, g, e, x) => #- e ? g(false) : g(x.isFile()) -#)

alias AsyncFileList = Wish a (List String)


readdir :: Boolean -> (String -> Boolean) -> String -> Wish a (List DirEnt)
export readdir = (recursiveWalk, filter, filePath) => Wish.Wish(
  (bad, good) => {
    #- fs.readdir(
      filePath,
      { withFileTypes: true, recursive: recursiveWalk },
      (e, x) => e ? bad(e) :
      good(__jsArrayToList__(x.filter(({name}) => filter(name)).map(y => ({
        name: y.name,
        path: y.path,
        groups: __jsArrayToList__(y.path.split(path.sep).slice(1)),
        directory: y.isDirectory()
      }))))
    ) -#
    return () => {}
  },
)
export readAll = readdir(true)
export readDirectory = readdir(false)


#elseif llvm

isDir :: String -> Boolean
isDir = extern "pickaxe__is__directory"

isDirectory :: String -> Wish a Boolean
export isDirectory = (p) => Wish.good(isDir(p))

// /*
isF :: String -> Boolean
isF = extern "pickaxe__is__file"

isFile :: String -> Wish a Boolean
export isFile = (p) => Wish.good(isF(p))

readdir :: Boolean -> (String -> Boolean) -> String -> Wish a (List DirEnt)
export readdir = (_, _, _) => Wish.good([])

readAll :: (String -> Boolean) -> String -> Wish a (List DirEnt)
export readAll = (_, _) => Wish.good([])

readDirectory :: (String -> Boolean) -> String -> Wish a (List DirEnt)
export readDirectory = (_, _) => Wish.good([])
// */

#endif
